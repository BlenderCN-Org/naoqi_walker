#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <footstep_planner/FootstepPlanner.h>
#include <humanoid_nav_msgs/ClipFootstep.h>


std::vector<humanoid_nav_msgs::StepTarget> footsteps;
void footstepsCallback(const visualization_msgs::MarkerArray& msg)
{
   ROS_INFO("Start to callback footsteps!");
   footsteps.clear();
   ROS_INFO("x=%f",msg.markers.begin()->pose.position.x);
   for(int i=0;i<msg.markers.size();i++)
   {       
           ROS_INFO("count: %d",i);
	   humanoid_nav_msgs::StepTarget msgR;
	   msgR.pose.x=msg.markers[i].pose.position.x;
	   msgR.pose.y=msg.markers[i].pose.position.y;
	   msgR.pose.theta=tf::getYaw(msg.markers[i].pose.orientation);
	   if (msg.markers[i].color.g==1.0)
		  msgR.leg=0; //right=0.left=1

	   else
		 msgR.leg=1;
	   footsteps.push_back(msgR);
	   ROS_INFO("Success to callback footsteps!");
	}  
}
int main(int argc, char** argv)
{
	ros::init(argc, argv, "odometry_publisher");

	ros::NodeHandle n;
	ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
	tf::TransformBroadcaster odom_broadcaster;

	ros::Publisher step_cmd = n.advertise<humanoid_nav_msgs::StepTarget>("footstep",50);
	ros::Subscriber sub = n.subscribe("footstep_planner/footsteps_array", 1000, footstepsCallback);


	//std::vector<humanoid_nav_msgs::StepTarget> footsteps;
	//geometry_msgs::Pose2D startP;startP.x=2.0;startP.y=0.3;startP.theta=0;
	//geometry_msgs::Pose2D goalP;  goalP.x=2.5;goalP.y=0.5;   goalP.theta=0.5;
	/*
	geometry_msgs::Pose2D startP;startP.x=0.5;startP.y=0.3;startP.theta=0;
	geometry_msgs::Pose2D goalP;  goalP.x=2.5;goalP.y=0.3;   goalP.theta=0;
	ros::ServiceClient client=n.serviceClient<humanoid_nav_msgs::PlanFootsteps>("plan_footsteps");
	humanoid_nav_msgs::PlanFootsteps srv;
	srv.request.start=startP;
	srv.request.goal =goalP;
	if (client.call(srv))
	{
	 ROS_INFO("result: %d, cost:%f", srv.response.result,srv.response.costs);
	 if(srv.response.result==0) ROS_ERROR("plannning fail!");
	 //footsteps=srv.response.footsteps;
	 ROS_INFO("step size: %d", footsteps.size());
	}
	else
	{
	 ROS_ERROR("Failed to plan");
	 //return 1;
	}
	*/

	int count=0;
	int step_count=0;
	double px,py,ptheta;

	double x = -0.5;
	double y = -0.3;
	double th = 0.0;

	double vx = 0.1;
	double vy = -0.1;
	double vth = 0.1;

	ros::Time current_time, last_time;
	current_time = ros::Time::now();
	last_time = ros::Time::now();

	humanoid_nav_msgs::StepTarget current_step;
	current_time = ros::Time::now();

	ROS_INFO("nao_odom initialized!");
	ros::Rate r(10);
	while(n.ok()){
		ros::spinOnce();// check for incoming messages
		current_time = ros::Time::now();

		if(footsteps.size()>0){
			//startP.x+=0.01;
			count++;

			if(step_count==0)step_count++;
			if(count==20){count=1;step_count++;}

			if (step_count<=footsteps.size())
			{ 
			if(count==1){
			   current_step=footsteps[step_count-1];
			   ROS_INFO("leg(right=0,left=1): %d, pose(%f,%f,%f)", current_step.leg, current_step.pose.x,current_step.pose.y,current_step.pose.theta);
			   step_cmd.publish(current_step);
			   }
			}
			else
			{
				step_count=0;
			}


			if(step_count>1){
				if(footsteps.size()>0)
				{
					if(count==1)
					{
					   px=footsteps[step_count-2].pose.x;
					   py=footsteps[step_count-2].pose.y;
					   ptheta=footsteps[step_count-2].pose.theta;
					 }
					else if (count>5&&count<15) 
					//else if (count==15) 
					{

					//s =  os = oa + as = x cos(theta) + y sin(theta) 
					//t =  ot = ay – ab = y cos(theta) – x sin(theta)
					 /*double bodyx=current_step.pose.x-footsteps[step_count-2].pose.x;
					 //double bodyy=current_step.pose.y-footsteps[step_count-2].pose.y;
					 double bodytheta=current_step.pose.theta-footsteps[step_count-2].pose.theta;
					 px=px+(bodyx*cos(bodytheta)+bodyy*sin(bodytheta))/10;
					 py=py+(bodyy*cos(bodytheta)-bodyx*sin(bodytheta))/10;
					 ptheta=ptheta+bodytheta/10;*/
					 px=px+(current_step.pose.x-footsteps[step_count-2].pose.x)/9;
					 py=py+(current_step.pose.y-footsteps[step_count-2].pose.y)/9;
					 ptheta=ptheta+(current_step.pose.theta-footsteps[step_count-2].pose.theta)/9;
					 //ROS_INFO("leg(right=0,left=1): %d, pose(%f,%f,%f)", current_step.leg, px,py,ptheta);
					}
					else ;
					

					//first, we'll publish the transform over tf
					geometry_msgs::TransformStamped odom_trans;
					odom_trans.header.stamp = current_time;
					odom_trans.header.frame_id = "base_link";
					odom_trans.child_frame_id = "map";

					odom_trans.transform.translation.x = -px;
					odom_trans.transform.translation.y = -py;
					odom_trans.transform.translation.z = -0.32;
					odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(-ptheta);

					//send the transform
					odom_broadcaster.sendTransform(odom_trans);

					//next, we'll publish the odometry message over ROS
					nav_msgs::Odometry odom;
					odom.header.stamp = current_time;
					odom.header.frame_id = "base_link";

					//set the position
					odom.pose.pose.position.x = -px;
					odom.pose.pose.position.y = -py;
					odom.pose.pose.position.z = -0.32;
					odom.pose.pose.orientation = tf::createQuaternionMsgFromYaw(-ptheta);//odom_quat;

					//set the velocity
					odom.child_frame_id = "map";
					odom.twist.twist.linear.x = vx;
					odom.twist.twist.linear.y = vy;
					odom.twist.twist.angular.z = vth;

					//publish the message
					odom_pub.publish(odom);

				}
			}
		}
	    else
	    {
			//since all odometry is 6DOF we'll need a quaternion created from yaw
			geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);

			//first, we'll publish the transform over tf
			geometry_msgs::TransformStamped odom_trans;
			odom_trans.header.stamp = current_time;
			odom_trans.header.frame_id = "base_link";
			odom_trans.child_frame_id = "map";
			


			odom_trans.transform.translation.x = x;
			odom_trans.transform.translation.y = y;
			odom_trans.transform.translation.z = -0.32;
			odom_trans.transform.rotation = odom_quat;

			//send the transform
			odom_broadcaster.sendTransform(odom_trans);

			//next, we'll publish the odometry message over ROS
			nav_msgs::Odometry odom;
			odom.header.stamp = current_time;
			odom.header.frame_id = "base_link";

			//set the position
			odom.pose.pose.position.x = x;
			odom.pose.pose.position.y = y;
			odom.pose.pose.position.z = -0.32;
			odom.pose.pose.orientation = odom_quat;

			//set the velocity
			odom.child_frame_id = "map";
			odom.twist.twist.linear.x = vx;
			odom.twist.twist.linear.y = vy;
			odom.twist.twist.angular.z = vth;

			//publish the message
			odom_pub.publish(odom);
		}

			last_time = current_time;
			r.sleep();
	}
}
