#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <footstep_planner/FootstepPlanner.h>
#include <humanoid_nav_msgs/ClipFootstep.h>
#include <iostream>


std::vector<humanoid_nav_msgs::StepTarget> footsteps;
geometry_msgs::PoseWithCovarianceStamped  start_pose;
bool flag=0;
void footstepsCallback(const visualization_msgs::MarkerArray& msg)
{
   ROS_INFO("Start to callback footsteps!");
   footsteps.clear();
   ROS_INFO("x=%f",msg.markers.begin()->pose.position.x);
   for(int i=0;i<msg.markers.size();i++)
   {       
           ROS_INFO("count: %d",i);
	   humanoid_nav_msgs::StepTarget msgR;
	   msgR.pose.x=msg.markers[i].pose.position.x;
	   msgR.pose.y=msg.markers[i].pose.position.y;
	   msgR.pose.theta=tf::getYaw(msg.markers[i].pose.orientation);
	   if (msg.markers[i].color.g==1.0)
		  msgR.leg=0; //right=0.left=1

	   else
		 msgR.leg=1;
	   footsteps.push_back(msgR);
	   ROS_INFO("Success to callback footsteps!");
	}  
}
void startCallback(geometry_msgs::PoseWithCovarianceStamped msg)
{
	ROS_INFO("get the Start pose!");
    	start_pose=msg;
	flag=1;
	
}

int main(int argc, char** argv)
{
	ros::init(argc, argv, "odometry_publisher");

	ros::NodeHandle n;
	ros::Publisher step_cmd = n.advertise<humanoid_nav_msgs::StepTarget>("footstep",50);
	ros::Subscriber sub = n.subscribe("footstep_planner/footsteps_array", 1000, footstepsCallback);
	ros::Subscriber start_sub = n.subscribe("initialpose",1000,startCallback);
	ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);


	humanoid_nav_msgs::StepTarget current_step;

	ROS_INFO("nao_odom initialized!");
	ros::Rate r(10);
	while(n.ok())
	{
		ros::spinOnce();// check for incoming messages
		if (flag==1)
		{
			//since all odometry is 6DOF we'll need a quaternion created from yaw
			//geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);
			tf::TransformBroadcaster odom_broadcaster;
			//first, we'll publish the transform over tf
			geometry_msgs::TransformStamped odom_trans;
			odom_trans.header.stamp = ros::Time::now();
			odom_trans.header.frame_id = "map";
			odom_trans.child_frame_id = "base_link";
	

			ROS_INFO("start station is (%f,%f)",start_pose.pose.pose.position.x,start_pose.pose.pose.position.y);
			odom_trans.transform.translation.x = start_pose.pose.pose.position.x;
			odom_trans.transform.translation.y = start_pose.pose.pose.position.y;
			odom_trans.transform.translation.z = -0.32;
			odom_trans.transform.rotation = start_pose.pose.pose.orientation;

			//send the transform
			odom_broadcaster.sendTransform(odom_trans);

			//next, we'll publish the odometry message over ROS
			nav_msgs::Odometry odom;
			odom.header.stamp = ros::Time::now();
			odom.header.frame_id = "map";

			//set the position
			odom.pose.pose.position.x = start_pose.pose.pose.position.x;
			odom.pose.pose.position.y = start_pose.pose.pose.position.y;
			odom.pose.pose.position.z = -0.32;
			odom.pose.pose.orientation = start_pose.pose.pose.orientation;
			double vx = 0.1;
			double vy = -0.1;
			double vth = 0.1;
			//set the velocity
			odom.child_frame_id = "base_link";
			odom.twist.twist.linear.x = vx;
			odom.twist.twist.linear.y = vy;
			odom.twist.twist.angular.z = vth;

			//publish the message
			odom_pub.publish(odom);
			//flag=0;
		}

		r.sleep();
	}
}
